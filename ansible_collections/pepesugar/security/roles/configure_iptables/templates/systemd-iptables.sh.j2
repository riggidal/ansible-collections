#!/bin/bash

restore_iptables () {
	iptables -F INPUT
	iptables -F DOCKER-USER
	iptables -P INPUT ACCEPT
	iptables -A DOCKER-USER -j RETURN
}
restore_iptables

# in order to stop service correctly
test -n "$RESTORE_ONLY" \
	&& echo "[INFO] Restore policies and exit because RESTORE_ONLY is defined" \
	&& exit 0

# if empty, iptables policies are restores after timeout automatically
PERSISTENT={{ 'yes' if configure_iptables.persistent == true }}

# how long to wait before restore
PERSISTENT_TIMEOUT={{ configure_iptables.persistent_timeout }}


# restore blacklist ip group
ipset destroy
ipset restore -f "{{ config_root }}/{{ role_name }}/blacklist.rules"


# configure policies for DOCKER-USER chain
iptables -F DOCKER-USER
iptables -A DOCKER-USER -i eth0 -m set --match-set blacklist src -j DROP
{% for rule in configure_iptables.rules %}
{% if 'DOCKER-USER' in rule.chains %}
iptables -A DOCKER-USER -i eth0 {{ '-s ' ~ rule.src_addr if rule.src_addr }} {{ '-d ' ~ rule.dst_addr if rule.dst_addr }} {{ '-p ' ~ rule.protocol if rule.protocol }} {{ '--sport ' ~ rule.src_port if rule.src_port }} {{ '--dport ' ~ rule.dst_port if rule.dst_port }}	-j RETURN
{% endif %}
{% endfor %}
iptables -A DOCKER-USER -i eth0 -m state --state RELATED,ESTABLISHED -j RETURN
iptables -A DOCKER-USER -i eth0 -j REJECT

# configure policies for INPUT chain
iptables -A INPUT -i eth0 -m set --match-set blacklist src -j DROP
{% for rule in configure_iptables.rules %}
{% if 'INPUT' in rule.chains %}
iptables -A INPUT -i eth0 {{ '-s ' ~ rule.src_addr if rule.src_addr }} {{ '-d ' ~ rule.dst_addr if rule.dst_addr }} {{ '-p ' ~ rule.protocol if rule.protocol }} {{ '--sport ' ~ rule.src_port if rule.src_port }} {{ '--dport ' ~ rule.dst_port if rule.dst_port }}	-j ACCEPT
{% endif %}
{% endfor %}
iptables -A INPUT -i eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -A INPUT -i eth0 -j REJECT


# rollback or not depends on PERSISTENT variable
test -z "$PERSISTENT" \
	&& sleep $PERSISTENT_TIMEOUT \
	&& echo "[INFO] Restoring iptables after $PERSISTENT_TIMEOUT because PERSISTENT is empty" \
	&& restore_iptables \
	&& exit 0

test -n "$PERSISTENT" \
	&& echo "[INFO] iptables policies are saved persistently because PERSISTENT is defined" \
	&& exit 0